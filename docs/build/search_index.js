var documenterSearchIndex = {"docs":
[{"location":"reference.html#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference.html#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference.html","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"reference.html#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference.html","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"reference.html","page":"Reference","title":"Reference","text":"Modules = [QuTaM]","category":"page"},{"location":"reference.html#QuTaM.run_trajectories-Tuple{System, SimulParameters}","page":"Reference","title":"QuTaM.run_trajectories","text":"run_trajectories(sys::System, params::SimulParameters) -> Vector{Trajectory}\n\nRun multiple quantum trajectories for a given system using precomputed data and specified simulation parameters.\n\nArguments\n\nsys::System: The quantum system to simulate, containing information about its structure, energy levels, and dynamics.\nparams::SimulParameters: A structure containing simulation parameters such as:\nmultiplier: Factor to scale the simulation end time tf.\ntf: Final time for the simulation.\nnsamples: Number of time samples for the simulation.\nntraj: Number of trajectories to simulate.\nseed: Seed for the random number generator to ensure reproducibility.\n\nReturns\n\nVector{Trajectory}: A vector containing the results of the simulated trajectories. Each element corresponds to a single trajectory and encapsulates relevant system state information over time.\n\nDetails\n\nPrecomputations:\nThe function generates a time vector ts using a scaled final time (params.multiplier * params.tf) and a specified number of samples (params.nsamples).\nPrecomputed matrices Qs are generated and populated via precompute! to optimize performance during trajectory simulations.\nTrajectory Simulation:\nThe function allocates memory for intermediate variables such as psi (state vector), W (weights), and P (channel probabilities).\nEach trajectory is simulated using the run_single_trajectory function, with seeds incremented for each trajectory to ensure uniqueness.\nAvoiding Artifacts:\nThe initial time is set to a small positive value (eps(Float64)) to avoid numerical artifacts at t = 0.\n\nExample\n\n```julia\n\nCreate a system and simulation parameters\n\nsys = System(NLEVELS = 3, NCHANNELS = 2) params = SimulParameters(multiplier = 1.5, tf = 10.0, nsamples = 100, ntraj = 50, seed = 42)\n\nRun the trajectories\n\ntrajectories = run_trajectories(sys, params)\n\nAccess the first trajectory\n\nfirst_traj = trajectories[1]\n\n\n\n\n\n","category":"method"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = QuTaM","category":"page"},{"location":"index.html#QuTaM","page":"Home","title":"QuTaM","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for QuTaM","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"run_trajectories","category":"page"},{"location":"index.html#QuTaM.run_trajectories","page":"Home","title":"QuTaM.run_trajectories","text":"run_trajectories(sys::System, params::SimulParameters) -> Vector{Trajectory}\n\nRun multiple quantum trajectories for a given system using precomputed data and specified simulation parameters.\n\nArguments\n\nsys::System: The quantum system to simulate, containing information about its structure, energy levels, and dynamics.\nparams::SimulParameters: A structure containing simulation parameters such as:\nmultiplier: Factor to scale the simulation end time tf.\ntf: Final time for the simulation.\nnsamples: Number of time samples for the simulation.\nntraj: Number of trajectories to simulate.\nseed: Seed for the random number generator to ensure reproducibility.\n\nReturns\n\nVector{Trajectory}: A vector containing the results of the simulated trajectories. Each element corresponds to a single trajectory and encapsulates relevant system state information over time.\n\nDetails\n\nPrecomputations:\nThe function generates a time vector ts using a scaled final time (params.multiplier * params.tf) and a specified number of samples (params.nsamples).\nPrecomputed matrices Qs are generated and populated via precompute! to optimize performance during trajectory simulations.\nTrajectory Simulation:\nThe function allocates memory for intermediate variables such as psi (state vector), W (weights), and P (channel probabilities).\nEach trajectory is simulated using the run_single_trajectory function, with seeds incremented for each trajectory to ensure uniqueness.\nAvoiding Artifacts:\nThe initial time is set to a small positive value (eps(Float64)) to avoid numerical artifacts at t = 0.\n\nExample\n\n```julia\n\nCreate a system and simulation parameters\n\nsys = System(NLEVELS = 3, NCHANNELS = 2) params = SimulParameters(multiplier = 1.5, tf = 10.0, nsamples = 100, ntraj = 50, seed = 42)\n\nRun the trajectories\n\ntrajectories = run_trajectories(sys, params)\n\nAccess the first trajectory\n\nfirst_traj = trajectories[1]\n\n\n\n\n\n","category":"function"},{"location":"tutorial.html#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial.html#ddudu","page":"Tutorial","title":"Ideas","text":"","category":"section"},{"location":"tutorial.html#Basic-Workflow","page":"Tutorial","title":"Basic Workflow","text":"","category":"section"},{"location":"tutorial.html","page":"Tutorial","title":"Tutorial","text":"We use the function run_trajectories:","category":"page"},{"location":"tutorial.html","page":"Tutorial","title":"Tutorial","text":"and follow Ideas","category":"page"},{"location":"tutorial.html","page":"Tutorial","title":"Tutorial","text":"using QuTaM\nprintln(QuTaM.rf_sys.NLEVELS)","category":"page"}]
}
